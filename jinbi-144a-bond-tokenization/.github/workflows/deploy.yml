name: Production Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'polygon-mainnet'
        type: choice
        options:
        - polygon-mainnet
        - polygon-testnet

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    if: github.event.release.tag_name != '' || github.event.inputs.environment == 'polygon-mainnet'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1

    - name: Install dependencies
      run: forge install

    - name: Run security audit (final check)
      run: |
        pip install slither-analyzer
        slither . --exclude-dependencies --filter-paths "lib/" --fail-high --fail-medium
        forge test

    - name: Build contracts
      run: forge build --extra-output-files abi bin

    - name: Deploy to Polygon Mainnet
      env:
        POLYGON_RPC_URL: ${{ secrets.POLYGON_RPC_URL }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      run: |
        # Verify we're on mainnet
        CHAIN_ID=$(cast chain-id --rpc-url $POLYGON_RPC_URL)
        if [ "$CHAIN_ID" != "137" ]; then
          echo "❌ ERROR: Not connected to Polygon mainnet (chain ID: $CHAIN_ID)"
          exit 1
        fi

        echo "✅ Connected to Polygon mainnet"

        # Deploy contracts
        DEPLOY_OUTPUT=$(forge script contracts/script/Deploy.s.sol --rpc-url $POLYGON_RPC_URL --broadcast --verify --slow)

        # Extract deployed addresses
        echo "$DEPLOY_OUTPUT" > deploy_output.txt

        # Verify deployment
        if echo "$DEPLOY_OUTPUT" | grep -q "error\|failed\|revert"; then
          echo "❌ CRITICAL: Deployment failed!"
          exit 1
        fi

        echo "✅ Deployment successful"

    - name: Generate deployment report
      run: |
        echo "# Production Deployment Report" > DEPLOYMENT_REPORT.md
        echo "" >> DEPLOYMENT_REPORT.md
        echo "**Date:** $(date)" >> DEPLOYMENT_REPORT.md
        echo "**Tag:** ${{ github.event.release.tag_name }}" >> DEPLOYMENT_REPORT.md
        echo "**Commit:** ${{ github.sha }}" >> DEPLOYMENT_REPORT.md
        echo "**Environment:** Polygon Mainnet" >> DEPLOYMENT_REPORT.md
        echo "" >> DEPLOYMENT_REPORT.md
        echo "## Contract Addresses" >> DEPLOYMENT_REPORT.md
        echo "\`\`\`" >> DEPLOYMENT_REPORT.md
        cat deploy_output.txt | grep "Deployed to:" | sed 's/.*Deployed to: //' >> DEPLOYMENT_REPORT.md
        echo "\`\`\`" >> DEPLOYMENT_REPORT.md

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts
        path: |
          DEPLOYMENT_REPORT.md
          deploy_output.txt
          out/

    - name: Create deployment notification
      run: |
        echo "🚀 **PRODUCTION DEPLOYMENT COMPLETE**" >> notification.md
        echo "" >> notification.md
        echo "**Tag:** ${{ github.event.release.tag_name }}" >> notification.md
        echo "**Network:** Polygon Mainnet" >> notification.md
        echo "**Status:** ✅ Successful" >> notification.md
        echo "" >> notification.md
        echo "Next steps:" >> notification.md
        echo "1. Execute ownership transfer to Safe multisig" >> notification.md
        echo "2. Run production verification scripts" >> notification.md
        echo "3. Update investor documentation with new addresses" >> notification.md

  verify-deployment:
    runs-on: ubuntu-latest
    needs: deploy-production

    steps:
    - uses: actions/checkout@v4

    - name: Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-artifacts

    - name: Verify contract ownership
      run: |
        # This would verify that contracts are owned by the expected Safe address
        echo "Ownership verification would go here"

    - name: Run post-deployment tests
      run: |
        # Run integration tests against deployed contracts
        echo "Post-deployment verification would go here"

    - name: Send deployment confirmation
      run: |
        echo "Deployment verification complete"
        echo "✅ All contracts deployed and verified"
        echo "✅ Ownership checks passed"
        echo "✅ Integration tests successful"